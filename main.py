import os
from fastapi import FastAPI, Request
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)
from telegram.constants import ParseMode

TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = "@free_time_money"
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ü—Ä–∏–º–µ—Ä: https://your-app.onrender.com

app = FastAPI()

application = Application.builder().token(TOKEN).build()

# –≠—Ç–∞–ø—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
TITLE, DESCRIPTION, CATEGORY, PRICE, CITY = range(5)

CATEGORIES = [
    "–°–∞–π—Ç—ã", "IT —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ù–µ–π—Ä–æ—Å–µ—Ç–∏", "–î–∏–∑–∞–π–Ω",
    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–¢–µ–Ω–¥–µ—Ä—ã", "–Æ—Ä–∏—Å—Ç—ã"
]

# -------- –ú–µ–Ω—é --------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ó–∞–∫–∞–∑", callback_data="new_order")],
        [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ó–∞–∫–∞–∑. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="find_order")],
        [InlineKeyboardButton("–†–µ—Å—É—Ä—Å—ã: –ê—Ä–µ–Ω–¥–∞. –ü—Ä–æ–∫–∞—Ç. –†–∞–±–æ—á–∏–µ.", callback_data="resources")],
        [InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral")],
        [InlineKeyboardButton("–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data="faq")],
        [InlineKeyboardButton("–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", callback_data="support")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ú–µ–Ω—é", reply_markup=reply_markup)

# -------- –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é --------
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "new_order":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:")
        return TITLE

    elif query.data == "find_order":
        await query.message.reply_text("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif query.data == "resources":
        await query.message.reply_text("–†–∞–∑–¥–µ–ª —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif query.data == "referral":
        link = await context.bot.create_chat_invite_link(chat_id=CHANNEL_ID)
        await query.message.reply_text(
            f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link.invite_link}"
        )
    elif query.data == "faq":
        await query.message.reply_text("–†–∞–∑–¥–µ–ª FAQ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif query.data == "support":
        await query.message.reply_text("–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã: @username_support")

    return ConversationHandler.END

# -------- –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ --------
async def title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['title'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    return DESCRIPTION


async def description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['description'] = update.message.text
    keyboard = [[InlineKeyboardButton(cat, callback_data=cat)] for cat in CATEGORIES]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    return CATEGORY


async def category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['category'] = query.data
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 —Ä—É–±):")
    return PRICE


async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['price'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return CITY


async def city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['city'] = update.message.text

    order_text = (
        f"<b>üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {context.user_data['title']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {context.user_data['description']}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {context.user_data['category']}\n"
        f"<b>–ë—é–¥–∂–µ—Ç:</b> {context.user_data['price']}\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> {context.user_data['city']}"
    )

    await context.bot.send_message(
        chat_id=CHANNEL_ID,
        text=order_text,
        parse_mode=ParseMode.HTML
    )

    await update.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# -------- Handlers --------
conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(menu_handler, pattern="^new_order$")],
    states={
        TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, title)],
        DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
        CATEGORY: [CallbackQueryHandler(category)],
        PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, price)],
        CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

application.add_handler(CommandHandler("start", start))
application.add_handler(conv_handler)
application.add_handler(CallbackQueryHandler(menu_handler))

# -------- FastAPI --------
@app.on_event("startup")
async def on_startup():
    await application.bot.set_webhook(f"{WEBHOOK_URL}/{TOKEN}")


@app.on_event("shutdown")
async def on_shutdown():
    await application.bot.delete_webhook()


@app.post(f"/{TOKEN}")
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, application.bot)
    await application.update_queue.put(update)
    return "OK"


# -------- –ó–∞–ø—É—Å–∫ --------
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=10000)
