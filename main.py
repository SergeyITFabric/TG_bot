
import logging
import os
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)
from flask import Flask

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TITLE, DESCRIPTION, CATEGORY, BUDGET, CITY = range(5)

# Flask
app_flask = Flask(__name__)

@app_flask.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."

# –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="create_order")],
        [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", callback_data="about")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if args and args[0] == "create_order":
        await update.message.reply_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return TITLE

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'create_order':
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return TITLE

    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END

# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
async def get_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    return DESCRIPTION

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–°–∞–π—Ç—ã, IT —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –ù–µ–π—Ä–æ—Å–µ—Ç–∏, –î–∏–∑–∞–π–Ω, –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥, –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –¢–µ–Ω–¥–µ—Ä—ã, –Æ—Ä–∏—Å—Ç—ã):")
    return CATEGORY

async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["category"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç / —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã:")
    return BUDGET

async def get_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["budget"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return CITY

async def get_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text

    order_text = (
        f"üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!

"
        f"**{context.user_data['title']}**

"
        f"{context.user_data['description']}

"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data['category']}
"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {context.user_data['budget']}
"
        f"üìç –ì–æ—Ä–æ–¥: {context.user_data['city']}"
    )

    await update.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

    await context.bot.send_message(
        chat_id=CHANNEL_USERNAME,
        text=order_text,
        parse_mode="Markdown"
    )

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
async def post_menu_to_channel(application):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑", url="https://t.me/FTM_menu_user_Bot?start=create_order")],
        [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", url="https://t.me/FTM_menu_user_Bot")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", url="https://t.me/FTM_menu_user_Bot")]
    ])
    message = await application.bot.send_message(
        chat_id=CHANNEL_USERNAME,
        text="–≠—Ç–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await application.bot.pin_chat_message(
        chat_id=CHANNEL_USERNAME,
        message_id=message.message_id,
        disable_notification=True
    )

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def run_bot():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    order_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_menu, pattern="^create_order$")],
        states={
            TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_title)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_category)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_budget)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(order_conv)
    application.add_handler(CallbackQueryHandler(handle_menu))

    await post_menu_to_channel(application)
    await application.run_polling()

if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.create_task(run_bot())
    app_flask.run(host="0.0.0.0", port=10000)
