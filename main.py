import os
from fastapi import FastAPI, Request
from telegram import Update, BotCommand
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    CallbackQueryHandler, ContextTypes, ConversationHandler
)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

TOKEN = os.getenv('BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')  # –ù–∞–ø—Ä–∏–º–µ—Ä, https://tg-bot-abc.onrender.com

CHANNEL_USERNAME = '@free_time_money'

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
bot_app = Application.builder().token(TOKEN).build()

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI
app = FastAPI()

# ====================
# === –ú–µ–Ω—é –¥–ª—è –±–æ—Ç–∞ ===
# ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ó–∞–∫–∞–∑", callback_data='place_order')],
        [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ó–∞–∫–∞–∑. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='find_order')],
        [InlineKeyboardButton("–†–µ—Å—É—Ä—Å—ã: –ê—Ä–µ–Ω–¥–∞. –ü—Ä–æ–∫–∞—Ç. –†–∞–±–æ—á–∏–µ.", callback_data='resources')],
        [InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='referral')],
        [InlineKeyboardButton("–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data='faq')],
        [InlineKeyboardButton("–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", callback_data='support')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)


# ============================
# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Callbacks ====
# ============================

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'place_order':
        await query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:')
        return TITLE

    elif query.data == 'find_order':
        await query.message.reply_text('–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')

    elif query.data == 'resources':
        await query.message.reply_text('–†–µ—Å—É—Ä—Å—ã: –∞—Ä–µ–Ω–¥–∞, –ø—Ä–æ–∫–∞—Ç, —Ä–∞–±–æ—á–∏–µ.')

    elif query.data == 'referral':
        referral_link = f"https://t.me/{context.bot.username}?start={query.from_user.id}"
        await query.message.reply_text(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}")

    elif query.data == 'faq':
        await query.message.reply_text('–ó–¥–µ—Å—å –±—É–¥—É—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.')

    elif query.data == 'support':
        await query.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @YourSupportUsername')

    return ConversationHandler.END


# ===============================
# === –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–∫–∞–∑–∞ ====
# ===============================

TITLE, DESCRIPTION, CATEGORY, PRICE, CITY = range(5)

async def title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['title'] = update.message.text
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:')
    return DESCRIPTION

async def description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['description'] = update.message.text
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞:')
    return CATEGORY

async def category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['category'] = update.message.text
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç –∑–∞–∫–∞–∑–∞:')
    return PRICE

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['price'] = update.message.text
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:')
    return CITY

async def city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['city'] = update.message.text

    order_text = (
        f"üìù <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {context.user_data['title']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {context.user_data['description']}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {context.user_data['category']}\n"
        f"<b>–ë—é–¥–∂–µ—Ç:</b> {context.user_data['price']}\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> {context.user_data['city']}"
    )

    await context.bot.send_message(chat_id=CHANNEL_USERNAME, text=order_text, parse_mode='HTML')
    await update.message.reply_text('–í–∞—à –∑–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â–µ–Ω!')

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    return ConversationHandler.END


# ===============================
# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers ====
# ===============================

conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(button_handler, pattern='place_order')],
    states={
        TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, title)],
        DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
        CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category)],
        PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, price)],
        CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
    },
    fallbacks=[CommandHandler('cancel', cancel)],
)

bot_app.add_handler(CommandHandler('start', start))
bot_app.add_handler(CallbackQueryHandler(button_handler))
bot_app.add_handler(conv_handler)


# ==========================
# === –í–µ–±—Ö—É–∫ –∏ –∑–∞–ø—É—Å–∫ ====
# ==========================

@app.on_event("startup")
async def on_startup():
    webhook_path = f"/{TOKEN}"
    await bot_app.bot.set_webhook(url=WEBHOOK_URL + webhook_path)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL + webhook_path}")


@app.on_event("shutdown")
async def on_shutdown():
    await bot_app.bot.delete_webhook()


@app.post(f"/{TOKEN}")
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, bot_app.bot)
    await bot_app.update_queue.put(update)
    return {"ok": True}


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ª–æ–∫–∞–ª—å–Ω–æ
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=10000)
