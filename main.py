import logging
import asyncio
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes
)
from flask import Flask

# ============ –ù–ê–°–¢–†–û–ô–ö–ò ============
TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'
CHANNEL_USERNAME = '@YOUR_CHANNEL_USERNAME'
WELCOME_TEXT = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
CATEGORIES = ['–°–∞–π—Ç—ã', 'IT —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ù–µ–π—Ä–æ—Å–µ—Ç–∏', '–î–∏–∑–∞–π–Ω', '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–¢–µ–Ω–¥–µ—Ä—ã', '–Æ—Ä–∏—Å—Ç—ã']

# ============ –õ–û–ì–ò ============
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ============ Flask ============
app_flask = Flask(__name__)

@app_flask.route("/")
def hello():
    return "Bot is running!"

# ============ –°–æ—Å—Ç–æ—è–Ω–∏—è ============
TITLE, DESCRIPTION, CATEGORY, BUDGET, CITY = range(5)

# ============ –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é ============
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order")],
        [InlineKeyboardButton("üë®‚Äçüíª –û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑—ã", callback_data="responses")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ============ –•–µ–Ω–¥–ª–µ—Ä—ã ============
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        text=WELCOME_TEXT,
        reply_markup=main_menu_keyboard()
    )

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "order":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:", reply_markup=ReplyKeyboardRemove())
        return TITLE
    elif query.data == "responses":
        await query.message.reply_text("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif query.data == "help":
        await query.message.reply_text("–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.")

    return ConversationHandler.END

# ============ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ============
async def title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    return DESCRIPTION

async def description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    keyboard = [[category] for category in CATEGORIES]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return CATEGORY

async def category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["category"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏–ª–∏ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã:")
    return BUDGET

async def budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["budget"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return CITY

async def city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text

    title = context.user_data["title"]
    description = context.user_data["description"]
    category = context.user_data["category"]
    budget = context.user_data["budget"]
    city = context.user_data["city"]

    post_text = (
        f"üìù <b>{title}</b>\n\n"
        f"{description}\n\n"
        f"üíº –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç / –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: <b>{budget}</b>\n"
        f"üìç –ì–æ—Ä–æ–¥: <b>{city}</b>\n\n"
        f"#{category.replace(' ', '_')} #{city.replace(' ', '_')}"
    )

    await context.bot.send_message(
        chat_id=CHANNEL_USERNAME,
        text=post_text,
        parse_mode="HTML"
    )

    await update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!", reply_markup=main_menu_keyboard())

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ============ –ó–∞–ø—É—Å–∫ ============
async def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_menu))

    order_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_menu, pattern="^order$")],
        states={
            TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, title)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, budget)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(order_conv)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    app_flask.run(host="0.0.0.0", port=10000)
