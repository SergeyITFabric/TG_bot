import os
import asyncio
import threading
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
web_app = Flask(__name__)

@web_app.route('/')
def home():
    return '‚úÖ Telegram-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Flask + PTB'

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ó–∞–∫–∞–∑", callback_data='create_order')],
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ó–∞–∫–∞–∑. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='find_order')],
        [InlineKeyboardButton("üõ† –†–µ—Å—É—Ä—Å—ã: –ê—Ä–µ–Ω–¥–∞. –ü—Ä–æ–∫–∞—Ç. –†–∞–±–æ—á–∏–µ.", callback_data='resources')],
        [InlineKeyboardButton("ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='referral')],
        [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data='faq')],
        [InlineKeyboardButton("‚ù§Ô∏è –°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", callback_data='support')],
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}")

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
async def post_menu_to_channel(application):
    channel_username = os.getenv("CHANNEL_USERNAME")  # –ü—Ä–∏–º–µ—Ä: @free_time_money
    if not channel_username:
        print("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CHANNEL_USERNAME")
        return

    keyboard = get_main_menu()
    message = await application.bot.send_message(
        chat_id=channel_username,
        text="–≠—Ç–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–Ω–æ —Å–≤–µ—Ä—Ö—É. –ò –ø–æ–¥ –Ω–∏–º –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await application.bot.pin_chat_message(chat_id=channel_username, message_id=message.message_id, disable_notification=True)

# –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
async def run_bot():
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN")
        return

    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_menu))

    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")

    await app.initialize()
    await app.start()
    await post_menu_to_channel(app)
    await app.updater.start_polling()

# –ó–∞–ø—É—Å–∫ Flask
def run_flask():
    port = int(os.environ.get("PORT", 10000))
    web_app.run(host="0.0.0.0", port=port)

# –ì–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥
if __name__ == '__main__':
    threading.Thread(target=run_flask).start()
    loop = asyncio.get_event_loop()
    loop.create_task(run_bot())
    loop.run_forever()
