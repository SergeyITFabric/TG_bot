
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from fastapi import FastAPI, Request
import uvicorn
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = "@free_time_money"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –®–∞–≥–∏ ConversationHandler
TITLE, DESCRIPTION, CATEGORY, BUDGET, CITY = range(5)

app = FastAPI()
bot_app = Application.builder().token(TOKEN).build()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üöÄ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="create_order")],
        [InlineKeyboardButton("üìÇ –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="find_order")],
        [InlineKeyboardButton("üèóÔ∏è –†–µ—Å—É—Ä—Å—ã: –ê—Ä–µ–Ω–¥–∞. –ü—Ä–æ–∫–∞—Ç. –†–∞–±–æ—á–∏–µ", callback_data="resources")],
        [InlineKeyboardButton("üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral")],
        [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data="faq")],
        [InlineKeyboardButton("üë©‚Äçüíª –°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", callback_data="support")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏—Ä–∂—É —Ñ—Ä–∏–ª–∞–Ω—Å–∞!", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "create_order":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:")
        return TITLE
    elif query.data == "referral":
        await query.message.reply_text(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/free_time_money?start={query.from_user.id}")
        return ConversationHandler.END
    else:
        await query.message.reply_text("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        return ConversationHandler.END

# –ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ –∑–∞–∫–∞–∑–∞
async def title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["title"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    return DESCRIPTION

async def description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["description"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    return CATEGORY

async def category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["category"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –∑–∞–∫–∞–∑–∞:")
    return BUDGET

async def budget(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["budget"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return CITY

async def city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["city"] = update.message.text

    order_text = (
        f"üìù <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>

"
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {context.user_data['title']}
"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {context.user_data['description']}
"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {context.user_data['category']}
"
        f"<b>–ë—é–¥–∂–µ—Ç:</b> {context.user_data['budget']}
"
        f"<b>–ì–æ—Ä–æ–¥:</b> {context.user_data['city']}"
    )

    await bot_app.bot.send_message(chat_id=CHANNEL_ID, text=order_text, parse_mode="HTML")
    await update.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# Webhook
@app.post(f"/{TOKEN}")
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, bot_app.bot)
    await bot_app.process_update(update)
    return "ok"

@app.get("/")
async def read_root():
    return {"status": "ok"}

@app.on_event("startup")
async def startup() -> None:
    await bot_app.bot.set_webhook(f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}")

@app.on_event("shutdown")
async def shutdown() -> None:
    await bot_app.bot.delete_webhook()

# –•–µ–Ω–¥–ª–µ—Ä—ã
conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(menu_handler, pattern="create_order")],
    states={
        TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, title)],
        DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
        CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category)],
        BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, budget)],
        CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(CallbackQueryHandler(menu_handler))
bot_app.add_handler(conv_handler)

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=10000)
