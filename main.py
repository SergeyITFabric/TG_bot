import logging
import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_USERNAME = os.getenv('CHANNEL_USERNAME')  # –ü—Ä–∏–º–µ—Ä: '@free_time_money'

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
CATEGORIES = [
    "–°–∞–π—Ç—ã", "IT —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ù–µ–π—Ä–æ—Å–µ—Ç–∏",
    "–î–∏–∑–∞–π–Ω", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–¢–µ–Ω–¥–µ—Ä—ã", "–Æ—Ä–∏—Å—Ç—ã"
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    TITLE,
    DESCRIPTION,
    CATEGORY,
    BUDGET,
    CITY
) = range(5)

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä Flask –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Render
app_web = Flask(__name__)


@app_web.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ûï –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="create_order")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "create_order":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:", reply_markup=ReplyKeyboardRemove())
        return TITLE

    if query.data == "rules":
        await query.message.reply_text(
            "–ü—Ä–∞–≤–∏–ª–∞:\n\n"
            "1. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–∞–∑—ã.\n"
            "2. –í—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –Ω–∞–ø—Ä—è–º—É—é –º–µ–∂–¥—É –∑–∞–∫–∞–∑—á–∏–∫–æ–º –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.\n"
            "3. –ë–∏—Ä–∂–∞ –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏."
        )
        return ConversationHandler.END


# –≠—Ç–∞–ø—ã –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
async def title_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text
    await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
    return DESCRIPTION


async def description_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text

    keyboard = [
        [InlineKeyboardButton(cat, callback_data=cat)] for cat in CATEGORIES
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup
    )
    return CATEGORY


async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data["category"] = query.data
    await query.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã:")
    return BUDGET


async def budget_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["budget"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return CITY


async def city_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text

    title = context.user_data["title"]
    description = context.user_data["description"]
    category = context.user_data["category"]
    budget = context.user_data["budget"]
    city = context.user_data["city"]

    text = (
        f"üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"<b>{title}</b>\n\n"
        f"{description}\n\n"
        f"üíº –ö–∞—Ç–µ–≥–æ—Ä–∏—è: #{category.replace(' ', '_')}\n"
        f"üìç –ì–æ—Ä–æ–¥: #{city.replace(' ', '_')}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç / –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {budget}"
    )

    await context.bot.send_message(
        chat_id=CHANNEL_USERNAME,
        text=text,
        parse_mode="HTML"
    )

    await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    application = Application.builder().token(TOKEN).build()

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
    order_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(menu_handler, pattern="^create_order$")
        ],
        states={
            TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, title_handler)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description_handler)],
            CATEGORY: [CallbackQueryHandler(category_handler)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, budget_handler)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(menu_handler, pattern="^rules$"))
    application.add_handler(order_conv)

    await application.run_polling()


if __name__ == "__main__":
    import asyncio

    loop = asyncio.get_event_loop()
    loop.create_task(main())
    app_web.run(host="0.0.0.0", port=10000)
