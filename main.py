
import logging
import os

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@free_time_money"

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = [
    "–°–∞–π—Ç—ã",
    "IT —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
    "–ù–µ–π—Ä–æ—Å–µ—Ç–∏",
    "–î–∏–∑–∞–π–Ω",
    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–¢–µ–Ω–¥–µ—Ä—ã",
    "–Æ—Ä–∏—Å—Ç—ã",
]

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
app_flask = Flask(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
TITLE, DESCRIPTION, CATEGORY, BUDGET, CITY = range(5)


# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_menu(update, context)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é
async def send_menu(update, context):
    keyboard = [
        [InlineKeyboardButton("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="place_order")],
        [InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
        )
    elif update.callback_query:
        await update.callback_query.message.edit_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "place_order":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:", reply_markup=ReplyKeyboardRemove())
        return TITLE

    if query.data == "rules":
        await query.message.reply_text("–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞...")
        return ConversationHandler.END

    if query.data == "support":
        await query.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @your_support_username")
        return ConversationHandler.END


# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
async def title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    return DESCRIPTION


async def description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    keyboard = [[cat] for cat in CATEGORIES]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return CATEGORY


async def category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["category"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã:")
    return BUDGET


async def budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["budget"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return CITY


async def city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
    order_text = (
        f"üìù <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>

"
        f"<b>{context.user_data['title']}</b>

"
        f"{context.user_data['description']}

"
        f"<b>–ë—é–¥–∂–µ—Ç:</b> {context.user_data['budget']}
"
        f"<b>–ì–æ—Ä–æ–¥:</b> {context.user_data['city']}

"
        f"#{context.user_data['category'].replace(' ', '_')} #{context.user_data['city'].replace(' ', '_')}"
    )

    await context.bot.send_message(
        chat_id=CHANNEL_USERNAME,
        text=order_text,
        parse_mode="HTML"
    )

    await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!", reply_markup=ReplyKeyboardRemove())

    return ConversationHandler.END


# –û—à–∏–±–∫–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def main():
    application = Application.builder().token(TOKEN).build()

    # –ú–µ–Ω—é
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(menu_handler))

    # –ó–∞–∫–∞–∑
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(menu_handler, pattern="^place_order$")],
        states={
            TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, title)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, budget)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
    )
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫
    application.run_polling()


# Flask healthcheck
@app_flask.route("/")
def index():
    return "Bot is running!"


if __name__ == "__main__":
    main()
