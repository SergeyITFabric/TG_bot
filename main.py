
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, CallbackQueryHandler, CommandHandler, ContextTypes,
    ConversationHandler, MessageHandler, filters
)
from fastapi import FastAPI, Request
import uvicorn
import asyncio
import os

TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = "@free_time_money"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

(ASK_TITLE, ASK_DESCRIPTION, ASK_CATEGORY, ASK_PRICE, ASK_CITY) = range(5)

categories = [
    "–°–∞–π—Ç—ã", "IT —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ù–µ–π—Ä–æ—Å–µ—Ç–∏", "–î–∏–∑–∞–π–Ω",
    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–¢–µ–Ω–¥–µ—Ä—ã", "–Æ—Ä–∏—Å—Ç—ã"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ó–∞–∫–∞–∑", callback_data="create_order")],
        [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ó–∞–∫–∞–∑. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="find_order")],
        [InlineKeyboardButton("–†–µ—Å—É—Ä—Å—ã: –ê—Ä–µ–Ω–¥–∞. –ü—Ä–æ–∫–∞—Ç. –†–∞–±–æ—á–∏–µ.", callback_data="resources")],
        [InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral")],
        [InlineKeyboardButton("–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data="faq")],
        [InlineKeyboardButton("–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", callback_data="support")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "create_order":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:")
        return ASK_TITLE
    else:
        await query.message.reply_text("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        return ConversationHandler.END

async def ask_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    return ASK_DESCRIPTION

async def ask_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    keyboard = [[InlineKeyboardButton(cat, callback_data=cat)] for cat in categories]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    return ASK_CATEGORY

async def save_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["category"] = query.data
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç –∑–∞–∫–∞–∑–∞:")
    return ASK_PRICE

async def ask_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["price"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return ASK_CITY

async def publish_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text
    title = context.user_data["title"]
    description = context.user_data["description"]
    category = context.user_data["category"]
    price = context.user_data["price"]
    city = context.user_data["city"]

    text = (
        f"üìù <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>
"
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}
"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}
"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}
"
        f"<b>–ë—é–¥–∂–µ—Ç:</b> {price}
"
        f"<b>–ì–æ—Ä–æ–¥:</b> {city}

"
        f"#{category.replace(' ', '_')} #{city.replace(' ', '_')}"
    )

    await context.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
    await update.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

@app.on_event("startup")
async def startup_event():
    asyncio.create_task(bot_app.initialize())
    await bot_app.bot.set_webhook(url=WEBHOOK_URL)

@app.on_event("shutdown")
async def shutdown_event():
    await bot_app.shutdown()

@app.post(f"/{TOKEN}")
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, bot_app.bot)
    await bot_app.process_update(update)
    return {"ok": True}

bot_app = Application.builder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(button, pattern="^create_order$")],
    states={
        ASK_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_description)],
        ASK_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_category)],
        ASK_CATEGORY: [CallbackQueryHandler(save_category)],
        ASK_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_city)],
        ASK_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, publish_order)]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(conv_handler)
bot_app.add_handler(CallbackQueryHandler(button))

WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=10000)
