from fastapi import FastAPI, Request
import uvicorn
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    Update,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
import os

TOKEN = "7642643259:AAErZAsn4qCzaRkArbuegI8EizGE8yRv1VU"
CHANNEL_ID = "@free_time_money"

app = FastAPI()

application = Application.builder().token(TOKEN).build()

(
    TITLE,
    DESCRIPTION,
    CATEGORY,
    PRICE,
    CITY,
) = range(5)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ó–∞–∫–∞–∑")],
        [KeyboardButton("–ù–∞–π—Ç–∏ –ó–∞–∫–∞–∑. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
        [KeyboardButton("–†–µ—Å—É—Ä—Å—ã: –ê—Ä–µ–Ω–¥–∞. –ü—Ä–æ–∫–∞—Ç. –†–∞–±–æ—á–∏–µ.")],
        [KeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")],
        [KeyboardButton("–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã")],
        [KeyboardButton("–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã")],
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=False
    )
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏—Ä–∂—É —Ñ—Ä–∏–ª–∞–Ω—Å–∞ Free Time Money!", reply_markup=reply_markup
    )


# –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑
async def order_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:")
    return TITLE


async def order_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    return DESCRIPTION


async def order_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞:")
    return CATEGORY


async def order_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["category"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –∑–∞–∫–∞–∑–∞:")
    return PRICE


async def order_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["price"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return CITY


async def order_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text

    text = (
        f"üìù <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {context.user_data['title']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {context.user_data['description']}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {context.user_data['category']}\n"
        f"<b>–ë—é–¥–∂–µ—Ç:</b> {context.user_data['price']}\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> {context.user_data['city']}"
    )

    await application.bot.send_message(
        chat_id=CHANNEL_ID, text=text, parse_mode="HTML"
    )
    await update.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â—ë–Ω!")
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
async def referral(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    ref_link = f"https://t.me/free_time_money_bot?start={user_id}"
    await update.message.reply_text(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}")


# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.post(f"/{TOKEN}")
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"ok": True}


@app.get("/")
async def root():
    return {"message": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"}


@app.on_event("startup")
async def on_startup():
    webhook_url = f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/{TOKEN}"
    await application.bot.set_webhook(webhook_url)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")


@app.on_event("shutdown")
async def on_shutdown():
    await application.bot.delete_webhook()


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ó–∞–∫–∞–∑"), order_start)],
    states={
        TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_title)],
        DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_description)],
        CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_category)],
        PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_price)],
        CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_city)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.Regex("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"), referral))
application.add_handler(conv_handler)


if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=10000)
