
import logging
from fastapi import FastAPI, Request
import uvicorn
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
import os

TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = "@free_time_money"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()
bot_app = Application.builder().token(TOKEN).build()

TITLE, DESCRIPTION, CATEGORY, PRICE, CITY = range(5)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ó–∞–∫–∞–∑", callback_data="create_order")],
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ó–∞–∫–∞–∑. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="find_order")],
        [InlineKeyboardButton("üõ† –†–µ—Å—É—Ä—Å—ã: –ê—Ä–µ–Ω–¥–∞. –ü—Ä–æ–∫–∞—Ç. –†–∞–±–æ—á–∏–µ.", callback_data="resources")],
        [InlineKeyboardButton("üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="ref_program")],
        [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data="faq")],
        [InlineKeyboardButton("üìû –°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", callback_data="support")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "create_order":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:")
        return TITLE
    elif data == "ref_program":
        link = f"https://t.me/free_time_money?start={query.from_user.id}"
        await query.message.reply_text(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{link}")
    else:
        await query.message.reply_text("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
async def title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    return DESCRIPTION


async def description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞:")
    return CATEGORY


async def category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["category"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∏–ª–∏ –±—é–¥–∂–µ—Ç –∑–∞–∫–∞–∑–∞:")
    return PRICE


async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["price"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return CITY


async def city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text

    text = (
        f"üìù <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>

"
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {context.user_data['title']}
"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {context.user_data['description']}
"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {context.user_data['category']}
"
        f"<b>–ë—é–¥–∂–µ—Ç:</b> {context.user_data['price']}
"
        f"<b>–ì–æ—Ä–æ–¥:</b> {context.user_data['city']}
"
    )

    await bot_app.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
    await update.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â—ë–Ω!")
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# FastAPI endpoint –¥–ª—è webhook
@app.post(f"/{TOKEN}")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot_app.bot)
    await bot_app.process_update(update)
    return {"ok": True}


@app.get("/")
async def root():
    return {"status": "ok"}


@app.on_event("startup")
async def startup():
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    await bot_app.bot.set_webhook(url=webhook_url)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")


@app.on_event("shutdown")
async def shutdown():
    await bot_app.bot.delete_webhook()


# –†–æ—É—Ç—ã –±–æ—Ç–∞
conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(menu_handler, pattern="^create_order$")],
    states={
        TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, title)],
        DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
        CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category)],
        PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, price)],
        CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(CallbackQueryHandler(menu_handler))
bot_app.add_handler(conv_handler)

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=10000)
