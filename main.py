import os
import logging
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from flask import Flask
import threading

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@free_time_money"

CATEGORIES = [
    "–°–∞–π—Ç—ã", "IT —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ù–µ–π—Ä–æ—Å–µ—Ç–∏",
    "–î–∏–∑–∞–π–Ω", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–¢–µ–Ω–¥–µ—Ä—ã", "–Æ—Ä–∏—Å—Ç—ã"
]

(
    ORDER_TITLE, ORDER_DESCRIPTION, ORDER_CATEGORY,
    ORDER_BUDGET, ORDER_CITY
) = range(5)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ó–∞–∫–∞–∑", callback_data="place_order")],
        [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ó–∞–∫–∞–∑. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="find_order")],
        [InlineKeyboardButton("–†–µ—Å—É—Ä—Å—ã: –ê—Ä–µ–Ω–¥–∞. –ü—Ä–æ–∫–∞—Ç. –†–∞–±–æ—á–∏–µ.", callback_data="resources")],
        [InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral")],
        [InlineKeyboardButton("–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data="faq")],
        [InlineKeyboardButton("–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", callback_data="support")],
    ]
    return InlineKeyboardMarkup(keyboard)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π
async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "place_order":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:", reply_markup=ReplyKeyboardRemove())
        return ORDER_TITLE

    elif data == "find_order":
        await query.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    elif data == "resources":
        await query.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    elif data == "referral":
        link = f"https://t.me/{context.bot.username}?start={query.from_user.id}"
        await query.message.reply_text(
            f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}"
        )

    elif data == "faq":
        await query.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    elif data == "support":
        await query.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    return ConversationHandler.END

# –®–∞–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def order_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    return ORDER_DESCRIPTION

async def order_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    keyboard = [[cat] for cat in CATEGORIES]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ORDER_CATEGORY

async def order_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["category"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏–ª–∏ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã:")
    return ORDER_BUDGET

async def order_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["budget"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return ORDER_CITY

async def order_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text

    title = context.user_data["title"]
    description = context.user_data["description"]
    category = context.user_data["category"]
    budget = context.user_data["budget"]
    city = context.user_data["city"]

    text = f"""
üìù <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>

<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}
<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> #{category}
<b>–ë—é–¥–∂–µ—Ç / –ß–∞—Å—ã:</b> {budget}
<b>–ì–æ—Ä–æ–¥:</b> #{city}
"""

    await context.bot.send_message(
        chat_id=CHANNEL_USERNAME,
        text=text,
        parse_mode="HTML"
    )

    await update.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# Flask –¥–ª—è Render
app = Flask(__name__)

@app.route("/")
def index():
    return "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω."

def run_flask():
    app.run(host="0.0.0.0", port=10000)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    application = Application.builder().token(TOKEN).build()

    order_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(menu_callback, pattern="^place_order$")],
        states={
            ORDER_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_title)],
            ORDER_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_description)],
            ORDER_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_category)],
            ORDER_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_budget)],
            ORDER_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_city)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(menu_callback))
    application.add_handler(order_conv)

    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()

    await application.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
