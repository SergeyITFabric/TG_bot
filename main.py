import os
import asyncio
from threading import Thread
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# Flask ‚Äî –ø—É—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
web_app = Flask(__name__)

@web_app.route('/')
def home():
    return '‚úÖ Flask —Ä–∞–±–æ—Ç–∞–µ—Ç. Telegram-–±–æ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ.'

# Telegram –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üì® –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ó–∞–∫–∞–∑", callback_data='create_order')],
        [InlineKeyboardButton("üìÅ –ù–∞–π—Ç–∏ –ó–∞–∫–∞–∑. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='find_order')],
        [InlineKeyboardButton("üîß –†–µ—Å—É—Ä—Å—ã: –ê—Ä–µ–Ω–¥–∞. –ü—Ä–æ–∫–∞—Ç. –†–∞–±–æ—á–∏–µ.", callback_data='resources')],
        [InlineKeyboardButton("ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='referral')],
        [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data='faq')],
        [InlineKeyboardButton("üë• –°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", callback_data='support')],
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data
    if action == 'create_order':
        await query.edit_message_text("üìù –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    elif action == 'find_order':
        await query.edit_message_text("üìÅ –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    elif action == 'resources':
        await query.edit_message_text("üîß –†–µ—Å—É—Ä—Å—ã: –∞—Ä–µ–Ω–¥–∞, –ø—Ä–æ–∫–∞—Ç, —Ä–∞–±–æ—á–∏–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    elif action == 'referral':
        user_id = query.from_user.id
        link = f"https://t.me/YOUR_BOT_USERNAME?start={user_id}"
        await query.edit_message_text(f"ü§ù –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}")
    elif action == 'faq':
        await query.edit_message_text("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    elif action == 'support':
        await query.edit_message_text("üë• –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @your_support_contact")

# –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫: –∑–∞–ø—É—Å–∫ Flask
def start_flask():
    port = int(os.environ.get("PORT", 10000))
    web_app.run(host="0.0.0.0", port=port)

# –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫: –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
async def run_telegram_bot():
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞.")
        return
    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_menu))
    print("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await app.run_polling()

if __name__ == '__main__':
    # –°—Ç–∞—Ä—Ç—É–µ–º Flask –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=start_flask).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    asyncio.run(run_telegram_bot())
