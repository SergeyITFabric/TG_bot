import os
import asyncio
import threading
from flask import Flask
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler, MessageHandler, filters
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
(TITLE, DESCRIPTION, CATEGORY, BUDGET, CITY) = range(5)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = ["–°–∞–π—Ç—ã", "IT —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ù–µ–π—Ä–æ—Å–µ—Ç–∏", "–î–∏–∑–∞–π–Ω",
              "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–¢–µ–Ω–¥–µ—Ä—ã", "–Æ—Ä–∏—Å—Ç—ã"]

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
web_app = Flask(__name__)


@web_app.route('/')
def home():
    return '‚úÖ Telegram-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Flask + PTB'


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ó–∞–∫–∞–∑", callback_data='create_order')],
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ó–∞–∫–∞–∑. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='find_order')],
        [InlineKeyboardButton("üõ† –†–µ—Å—É—Ä—Å—ã: –ê—Ä–µ–Ω–¥–∞. –ü—Ä–æ–∫–∞—Ç. –†–∞–±–æ—á–∏–µ.", callback_data='resources')],
        [InlineKeyboardButton("ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='referral')],
        [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data='faq')],
        [InlineKeyboardButton("‚ù§Ô∏è –°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", callback_data='support')],
    ]
    return InlineKeyboardMarkup(keyboard)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'create_order':
        await query.message.delete()
        await query.message.chat.send_message(
            "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return TITLE

    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END


# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
async def get_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['title'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    return DESCRIPTION


async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['description'] = update.message.text
    buttons = [[c] for c in CATEGORIES]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
    )
    return CATEGORY


async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    if category not in CATEGORIES:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return CATEGORY

    context.user_data['category'] = category
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:",
        reply_markup=ReplyKeyboardRemove()
    )
    return BUDGET


async def get_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['budget'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return CITY


async def get_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['city'] = update.message.text

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Å—Ç
    title = context.user_data['title']
    description = context.user_data['description']
    category = context.user_data['category']
    budget = context.user_data['budget']
    city = context.user_data['city']

    channel_username = os.getenv("CHANNEL_USERNAME")
    if not channel_username:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω–æ –∏–º—è –∫–∞–Ω–∞–ª–∞.")
        return ConversationHandler.END

    post_text = (
        f"<b>{title}</b>\n\n"
        f"{description}\n\n"
        f"<b>–ë—é–¥–∂–µ—Ç / –ß–∞—Å—ã:</b> {budget}\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> {city}\n\n"
        f"#{category.replace(' ', '')} #{city.replace(' ', '')}"
    )

    await context.bot.send_message(
        chat_id=channel_username,
        text=post_text,
        parse_mode="HTML"
    )

    await update.message.reply_text(
        "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END


# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª
async def post_menu_to_channel(application):
    channel_username = os.getenv("CHANNEL_USERNAME")
    if not channel_username:
        print("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CHANNEL_USERNAME")
        return

    keyboard = get_main_menu()
    message = await application.bot.send_message(
        chat_id=channel_username,
        text="–≠—Ç–æ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–Ω–æ —Å–≤–µ—Ä—Ö—É. –ü–æ–¥ –Ω–∏–º ‚Äî –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é. üëá\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await application.bot.pin_chat_message(
        chat_id=channel_username,
        message_id=message.message_id,
        disable_notification=True
    )


# –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
async def run_bot():
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN")
        return

    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_menu, pattern="^(create_order|find_order|resources|referral|faq|support)$"))

    order_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_menu, pattern='^create_order$')],
        states={
            TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_title)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_category)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_budget)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(order_conv)

    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")
    await app.initialize()
    await app.start()
    await post_menu_to_channel(app)
    await app.updater.start_polling()


# –ó–∞–ø—É—Å–∫ Flask
def run_flask():
    port = int(os.environ.get("PORT", 10000))
    web_app.run(host="0.0.0.0", port=port)


# –ì–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥
if __name__ == '__main__':
    threading.Thread(target=run_flask).start()
    asyncio.run(run_bot())
