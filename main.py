
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)
from fastapi import FastAPI, Request
import uvicorn

TOKEN = "7642643259:AAErZAsn4qCzaRkArbuegI8EizGE8yRv1VU"
CHANNEL_ID = "@free_time_money"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()
bot_app = Application.builder().token(TOKEN).build()

(ORDER_TITLE, ORDER_DESCRIPTION, ORDER_CATEGORY, ORDER_PRICE, ORDER_CITY) = range(5)

CATEGORIES = [
    "–°–∞–π—Ç—ã",
    "IT —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
    "–ù–µ–π—Ä–æ—Å–µ—Ç–∏",
    "–î–∏–∑–∞–π–Ω",
    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–¢–µ–Ω–¥–µ—Ä—ã",
    "–Æ—Ä–∏—Å—Ç—ã",
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ó–∞–∫–∞–∑", callback_data="order")],
        [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ó–∞–∫–∞–∑. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories")],
        [InlineKeyboardButton("–†–µ—Å—É—Ä—Å—ã: –ê—Ä–µ–Ω–¥–∞. –ü—Ä–æ–∫–∞—Ç. –†–∞–±–æ—á–∏–µ.", callback_data="resources")],
        [InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral")],
        [InlineKeyboardButton("–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data="faq")],
        [InlineKeyboardButton("–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", callback_data="support")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ú–µ–Ω—é", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "order":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:")
        return ORDER_TITLE

    await query.message.reply_text("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    return ConversationHandler.END

async def order_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["title"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    return ORDER_DESCRIPTION

async def order_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["description"] = update.message.text
    keyboard = [[InlineKeyboardButton(cat, callback_data=cat)] for cat in CATEGORIES]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    return ORDER_CATEGORY

async def order_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data["category"] = query.data
    await query.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 —Ä—É–±):")
    return ORDER_PRICE

async def order_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["price"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return ORDER_CITY

async def order_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["city"] = update.message.text

    text = (
        f"üìù <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>

"
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {context.user_data['title']}
"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {context.user_data['description']}
"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {context.user_data['category']}
"
        f"<b>–¶–µ–Ω–∞:</b> {context.user_data['price']}
"
        f"<b>–ì–æ—Ä–æ–¥:</b> {context.user_data['city']}"
    )

    await bot_app.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
    await update.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(button_handler, pattern="^order$")],
    states={
        ORDER_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_title)],
        ORDER_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_description)],
        ORDER_CATEGORY: [CallbackQueryHandler(order_category)],
        ORDER_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_price)],
        ORDER_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_city)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(CallbackQueryHandler(button_handler))
bot_app.add_handler(conv_handler)

@app.on_event("startup")
async def startup_event():
    await bot_app.bot.set_webhook("https://tg-bot-hvfu.onrender.com/" + TOKEN)

@app.on_event("shutdown")
async def shutdown_event():
    await bot_app.bot.delete_webhook()

@app.post("/" + TOKEN)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot_app.bot)
    await bot_app.process_update(update)
    return {"ok": True}

@app.get("/")
async def root():
    return {"status": "bot is running"}

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=10000)
